name: CI

on: [push]

env:
  GO111MODULE: "on"
  DOCKER_DRIVER: overlay

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Custom Postgres Image
        run: |
          docker build -t custom-postgres:latest -f ./server/Dockerfile .

      - name: Run Custom Postgres Container
        run: |
          docker run -d -p 5432:5432 --name ci-postgres custom-postgres:latest
          echo "Waiting for Postgres to be ready..."
          for i in {1..20}; do
            if docker exec ci-postgres pg_isready -U runner -d community; then
              echo "Postgres is ready!"
              break
            fi
            echo "Postgres not ready yet, sleeping for 5 seconds..."
            sleep 5
          done

      - name: Install Golang migrate dependency
        run: |
          curl -s https://packagecloud.io/install/repositories/golang-migrate/migrate/script.deb.sh | sudo bash
          sudo apt-get update
          sudo apt-get install -y migrate

      - name: Build Server Code
        run: |
          echo "Attempting to build test container and run migrations..."
          migrate -database "postgres://runner:password@localhost:5432/community?sslmode=disable" -path ./server/migrations up
          echo "Attempting to seed data ..."
          PGPASSWORD=password psql -h localhost -p 5432 -U runner -d community -a -f server/seed/seedData.sql
          echo "Attempting to insert test data into container ..."
          PGPASSWORD=password psql -h localhost -p 5432 -U runner -d community -a -f setup/dev/test_data.sql

      - name: Build Go code
        uses: docker://golang:latest
        with:
          args: |
            echo "Attempting to build go code."
            go version
            cd apilayer && go mod download
            CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .
            echo "Go build successful."

      - name: Run Unit Tests
        run: |
          echo "Attempting to build go code."
          go version
          cd apilayer/handler && go test -coverprofile=coverage.out ./... && go tool cover -func=coverage.out

      - name: Stop Postgres Container
        if: always()
        run: |
          docker stop ci-postgres
          docker rm ci-postgres

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.0.0"

      - name: Install dependencies
        run: |
          cd frontend &&
          yarn

      - name: Build frontend
        run: |
          cd frontend &&
          CI=true yarn build

      - name: Run linter
        run: |
          cd frontend &&
          yarn lint
